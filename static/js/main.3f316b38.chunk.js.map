{"version":3,"sources":["firebase/firebaseConfig.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store/store.js","components/AuthButton.js","components/AddTodo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialState","selectedTodo","completedTodo","todos","todosInitial","rootReducer","combineReducers","firebase","firebaseReducer","firestore","firestoreReducer","state","action","type","todo","isDone","initializeApp","settings","timestampsInSnapshots","enhancers","reduxFirestore","reactReduxFirebase","userProfile","useFirestoreForProfile","window","devToolsExtension","composedEnhancers","compose","store","createStore","AuthButton","isLoaded","this","props","auth","isEmpty","onClick","login","provider","style","width","logout","Component","connect","firebaseConnect","AddTodo","uid","value","onChange","evt","setState","target","addTodo","add","collection","name","date","Date","firestoreConnect","TodoList","styles","padding","cursor","backgroundColor","key","selectTodo","checked","completTodo","moment","unix","asHours","seconds","toFixed","asDays","refreshTodos","delTodos","todoItems","map","item","renderTodo","saveTodos","console","log","id","doc","set","delete","ordered","dispatch","where","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTASeA,G,cARQ,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,GACfC,kBAAmB,iB,kkBCPhB,IAAMC,EAAe,CACxBC,aAAc,KACdC,cAAc,MCGX,IAAMF,EAAe,CACxBG,MAAOC,GAGEC,EAAcC,YAAgB,CACvCC,SAAUC,kBACVC,UAAWC,mBACXP,MDPG,WAAgD,IAA/BQ,EAA8B,uDAAtBX,EAAcY,EAAQ,uCAClD,MAAoB,eAAhBA,EAAOC,KACA,EAAP,GAAYF,EAAZ,CAAmBV,aAAcW,EAAOE,OAExB,gBAAhBF,EAAOC,MACPD,EAAOE,KAAKC,QAAUH,EAAOE,KAAKC,OAC3B,EAAP,GAAYJ,EAAZ,CAAmBT,cAAeU,EAAOE,QAEtCH,KEDXJ,IAASS,cAAcvB,GACvBc,IAASE,YAAYQ,SAAS,CAAEC,uBAAuB,IAEvD,IAAMC,EAAY,CACdC,yBAAeb,KACfc,6BAAmBd,IAAU,CACzBe,YAAa,QACbC,wBAAwB,KAGDC,OAAOC,kBAQtC,IAAMC,EAAoBC,IAAO,WAAP,EACnBR,GAKQS,EAFDC,YAAYxB,EAAaL,EAAc0B,GC3B/CI,E,iLASQ,IAAD,OACL,OAAKC,mBAASC,KAAKC,MAAMC,MAGrBC,kBAAQH,KAAKC,MAAMC,MAEf,6BACI,4BACIE,QACI,kBAAM,EAAKH,MAAM1B,SAAS8B,MAAM,CAAEC,SAAU,SAAUzB,KAAM,YAFpE,uBAQL,4BACH0B,MAAO,CAAEC,MAAO,SAChBJ,QAAS,kBAAM,EAAKH,MAAM1B,SAASkC,WAFhC,WAbI,gD,GAXMC,aAsCVf,cACXgB,aARoB,SAAAhC,GACpB,MAAO,CAAEuB,KAAMvB,EAAMJ,SAAS2B,QAGP,IAKvBU,4BAFWjB,CAGbG,G,iBC1CIe,E,2MASFlC,MAAQ,CAAEG,KAAM,I,wEAEN,IAAD,OACL,OAAKkB,KAAKC,MAAMa,IAGZ,6BACI,2BACIjC,KAAK,OACLkC,MAAOf,KAAKrB,MAAMG,KAClBkC,SAAU,SAACC,GAAD,OAAS,EAAKC,SAAS,CAAEpC,KAAMmC,EAAIE,OAAOJ,WAExD,4BAAQX,QAAS,kBAAM,EAAKgB,YAA5B,aAToB,O,gCAc5BpB,KAAKC,MAAMxB,UAAU4C,IACjB,CAAEC,WAAY,SACd,CACIR,IAAKd,KAAKC,MAAMa,IAChBS,KAAMvB,KAAKrB,MAAMG,KACjBC,OAASiB,KAAKC,MAAMlB,OACpByC,KAAMxB,KAAKC,MAAMuB,OAGzBxB,KAAKkB,SAAS,CAAEpC,KAAM,S,GAnCR4B,aAkDPf,cACXgB,aAZoB,SAAAhC,GACpB,MAAO,CACHmC,IAAKnC,EAAMJ,SAAS2B,KAAKY,IACzB/B,QAAQ,EACRyC,KAAM,IAAIC,QAIS,IAKvBC,6BAFW/B,CAGbkB,GChDIc,E,mLAeS7C,GAAO,IAAD,OACP8C,EAAS,CACXC,QAAS,OACTC,OAAQ,WAKZ,OAHIhD,IAASkB,KAAKC,MAAMhC,eACpB2D,EAAOG,gBAAkB,WAGzB,yBACIC,IAAKlD,EAAKyC,KACVhB,MAAOqB,EACPxB,QAAS,kBAAM,EAAKH,MAAMgC,WAAWnD,KACpCA,EAAKyC,KACN,2BACI1C,KAAK,WACLqD,QAASpD,EAAKC,OACdiC,SAAU,kBAAM,EAAKf,MAAMkC,YAAYrD,MAE1CA,EAAK0C,KAAO,yCAAgBY,WAAgC,IAAhBA,IAASC,QAAaC,UAAWF,WAAkC,IAAlBtD,EAAK0C,KAAKe,SAAcD,WAAWE,QAAQ,GAA5H,MAA2I,KACvJ1D,EAAK0C,KAAO,wCAAeY,WAAgC,IAAhBA,IAASC,QAAaI,SAAUL,WAAkC,IAAlBtD,EAAK0C,KAAKe,SAAcE,UAAUD,UAAjH,KAAsI,KACnJ,4BAAQpC,QAAS,kBAAI,EAAKsC,aAAa5D,KAAvC,WACA,6BAAK,4BAAQsB,QAAS,kBAAI,EAAKuC,SAAS7D,KAAnC,c,+BAIP,IAAD,OACC8D,EAAY5C,KAAKC,MAAM9B,MAAM0E,KAC/B,SAACC,GAAD,OAAU,EAAKC,WAAWD,MAE9B,OACI,6BACI,6BACKF,GAEJ5C,KAAKC,MAAM/B,cAAgB,4BAAQkC,QAAS,kBAAI,EAAK4C,cAA1B,QAAuD,KACnF,kBAAC,EAAD,MACCC,QAAQC,IAAIlD,KAAKC,MAAM/B,eACvB8B,KAAKC,MAAM/B,cAAgB+E,QAAQC,IAAIlD,KAAKC,MAAM/B,cAAciF,IAAM,Q,kCAK/EnD,KAAKC,MAAMxB,UAAU6C,WAAW,SAC3B8B,IAAIpD,KAAKC,MAAM/B,cAAciF,IAC7BE,IACG,CACI9B,KAAMvB,KAAKC,MAAM/B,cAAcqD,KAC/BxC,OAAQiB,KAAKC,MAAM/B,cAAca,OACjC+B,IAAKd,KAAKC,MAAM/B,cAAc4C,IAC9BU,KAAMxB,KAAKC,MAAM/B,cAAcsD,KAAOxB,KAAKC,MAAM/B,cAAcsD,KAAO,IAAIC,S,+BAIjF3C,GACLkB,KAAKC,MAAMxB,UAAU6C,WAAW,SAC3B8B,IAAItE,EAAKqE,IACTG,W,mCAEIxE,GACTkB,KAAKC,MAAMxB,UAAU6C,WAAW,SAC3B8B,IAAItE,EAAKqE,IACTE,IACG,CACI7B,KAAM,IAAIC,KACVF,KAAMzC,EAAKyC,KACXxC,OAAQD,EAAKC,OACb+B,IAAKhC,EAAKgC,U,GAlFPJ,aAuGRf,cACXgB,aAjBoB,SAAAhC,GACpB,MAAO,CACHmC,IAAKnC,EAAMJ,SAAS2B,KAAKY,IACzB3C,MAAOQ,EAAMF,UAAU8E,QAAQpF,MAAQQ,EAAMF,UAAU8E,QAAQpF,MAAQ,GACvEF,aAAcU,EAAMR,MAAMF,aAC1BC,cAAeS,EAAMR,MAAMD,kBAIR,SAAAsF,GACvB,MAAO,CACHvB,WAAY,SAAAnD,GAAI,OAAI0E,EAAS,CAAE3E,KAAM,aAAcC,UACnDqD,YAAa,SAAArD,GAAI,OAAI0E,EAAU,CAAE3E,KAAM,cAAeC,cAM1D4C,4BAAiB,SAACzB,GACV,OAAKA,EAAMa,IACJ,CACH,CACIQ,WAAY,QACZmC,MAAO,CACH,CAAC,MAAO,KAAMxD,EAAMa,QALT,MAHpBnB,CAcbgC,GC3Ga+B,E,iLAXP,OACI,kBAAC,IAAD,CAAU9D,MAAOA,GACb,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANEc,aCIEiD,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f316b38.chunk.js","sourcesContent":["\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDN10evg-Zw2XNv7u1Jx7gRb7SwxUtrtFs\",\n    authDomain: \"antauth-54544.firebaseapp.com\",\n    databaseURL: \"https://antauth-54544.firebaseio.com\",\n    projectId: \"antauth-54544\",\n    storageBucket: \"\",\n    messagingSenderId: \"946742625779\"\n}\nexport default firebaseConfig","export const initialState = {\n    selectedTodo: null,\n    completedTodo:null\n};\n\nexport function reducer(state = initialState, action) {\n    if (action.type === \"selectTodo\") {\n        return { ...state, selectedTodo: action.todo }\n    }\n    if (action.type === \"completTodo\") {\n        action.todo.isDone = !action.todo.isDone;\n        return { ...state, completedTodo: action.todo }\n    }\n    return state\n}","import { combineReducers } from 'redux'\nimport { firebaseReducer } from 'react-redux-firebase'\nimport { firestoreReducer } from 'redux-firestore'\nimport { reducer as todosReducer, initialState as todosInitial } from './todos'\n\nexport const initialState = {\n    todos: todosInitial\n}\n\nexport const rootReducer = combineReducers({\n    firebase: firebaseReducer,\n    firestore: firestoreReducer,\n    todos: todosReducer\n})","import { createStore, compose } from 'redux'\nimport { reactReduxFirebase } from 'react-redux-firebase'\nimport { reduxFirestore } from 'redux-firestore'\n\n\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nimport firebaseConfig from '../../firebase/firebaseConfig'\nimport { initialState, rootReducer } from '../reducers'\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore().settings({ timestampsInSnapshots: true });\n\nconst enhancers = [\n    reduxFirestore(firebase),\n    reactReduxFirebase(firebase, {\n        userProfile: 'users',\n        useFirestoreForProfile: true,\n    })\n];\nconst reduxDevToolsExtension = window.devToolsExtension;\nif (\n    process.env.NODE_ENV === \"development\" &&\n    typeof reduxDevToolsExtension === \"function\"\n) {\n    enhancers.push(reduxDevToolsExtension())\n}\n\nconst composedEnhancers = compose(\n    ...enhancers\n);\n\nconst store = createStore(rootReducer, initialState, composedEnhancers);\n\nexport default store","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\n\n\nclass AuthButton extends Component {\n    static propTypes = {\n        auth: PropTypes.object,\n        firebase: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            logout: PropTypes.func.isRequired,\n        }),\n    };\n\n    render() {\n        if (!isLoaded(this.props.auth)) {\n            return <span>...Loading</span>\n        }\n        if (isEmpty(this.props.auth)) {\n            return (\n                <div>\n                    <button\n                        onClick={\n                            () => this.props.firebase.login({ provider: 'google', type: 'popup' })\n                        }\n                    >Log in with Google</button>\n                </div>\n            )\n        }\n        return <button\n            style={{ width: \"20rem\" }}\n            onClick={() => this.props.firebase.logout()}\n        > Logout</button >\n\n    }\n}\nconst mapStateToProps = state => {\n    return { auth: state.firebase.auth }\n};\n\nconst mapDispatchToProps = {\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    firebaseConnect()\n)(AuthButton)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firestoreConnect } from 'react-redux-firebase'\n\nclass AddTodo extends Component {\n    static propTypes = {\n        uid: PropTypes.string,\n        isDone : PropTypes.bool.isRequired,\n        date: PropTypes.instanceOf(Date),\n        firestore: PropTypes.shape({\n            add: PropTypes.func.isRequired\n        }).isRequired\n    };\n    state = { todo: '' };\n\n    render() {\n        if (!this.props.uid) return null\n\n        return (\n            <div>\n                <input\n                    type=\"text\"\n                    value={this.state.todo}\n                    onChange={(evt) => this.setState({ todo: evt.target.value })}\n                />\n                <button onClick={() => this.addTodo()}>Add Todo</button>\n            </div>\n        )\n    }\n    addTodo() {\n        this.props.firestore.add(\n            { collection: 'todos' },\n            {\n                uid: this.props.uid,\n                name: this.state.todo,\n                isDone : this.props.isDone,\n                date: this.props.date\n            }\n        )\n        this.setState({ todo: '' })\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        uid: state.firebase.auth.uid,\n        isDone: false,\n        date: new Date()\n    }\n}\n\nconst mapDispatchToProps = {}\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    firestoreConnect(),\n)(AddTodo)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport Moment from 'react-moment';\nimport * as moment from 'moment';\n\n\nimport AddTodo from './AddTodo'\n\nclass TodoList extends Component {\n    static propTypes = {\n        uid: PropTypes.string,\n        todos: PropTypes.arrayOf(PropTypes.object),\n        selectedTodo: PropTypes.object,\n        selectTodo: PropTypes.func.isRequired,\n        completedTodo: PropTypes.oneOfType([\n            PropTypes.object.isRequired,\n            PropTypes.oneOf(null).isRequired,\n        ]).isRequired,\n        completTodo: PropTypes.func.isRequired,\n        firestore: PropTypes.shape({\n            set: PropTypes.func.isRequired\n        }).isRequired\n    }\n    renderTodo(todo) {\n        const styles = {\n            padding: '1rem',\n            cursor: 'pointer'\n        }\n        if (todo === this.props.selectedTodo) {\n            styles.backgroundColor = '#988afe'\n        }\n        return (\n            <div\n                key={todo.name}\n                style={styles}\n                onClick={() => this.props.selectTodo(todo)}>\n                {todo.name}\n                <input\n                    type=\"checkbox\"\n                    checked={todo.isDone}\n                    onChange={() => this.props.completTodo(todo)}\n                />\n                {todo.date ? <span>Hours: {((moment.duration(moment().unix()*1000).asHours())-moment.duration(todo.date.seconds*1000).asHours()).toFixed(1)}  </span> : null}\n                {todo.date ? <span>Days: {((moment.duration(moment().unix()*1000).asDays())-moment.duration(todo.date.seconds*1000).asDays()).toFixed()} </span> : null}\n                <button onClick={()=>this.refreshTodos(todo)}>refresh</button>\n                <div><button onClick={()=>this.delTodos(todo)}>delete</button></div>\n            </div>\n        )\n    }\n    render() {\n        const todoItems = this.props.todos.map(\n            (item) => this.renderTodo(item)\n        )\n        return (\n            <div>\n                <div>\n                    {todoItems}\n                </div>\n                {this.props.completedTodo ? <button onClick={()=>this.saveTodos()}>Save</button> : null}\n                <AddTodo />\n                {console.log(this.props.completedTodo)}\n                {this.props.completedTodo ? console.log(this.props.completedTodo.id) : null}\n            </div>\n        )\n    }\n    saveTodos() {\n        this.props.firestore.collection('todos')\n            .doc(this.props.completedTodo.id)\n            .set(\n                {\n                    name: this.props.completedTodo.name,\n                    isDone: this.props.completedTodo.isDone,\n                    uid: this.props.completedTodo.uid,\n                    date: this.props.completedTodo.date ? this.props.completedTodo.date : new Date()\n                }\n            );\n    }\n    delTodos(todo) {\n        this.props.firestore.collection('todos')\n            .doc(todo.id)\n            .delete()\n    }\n    refreshTodos(todo) {\n        this.props.firestore.collection('todos')\n            .doc(todo.id)\n            .set(\n                {\n                    date: new Date(),\n                    name: todo.name,\n                    isDone: todo.isDone,\n                    uid: todo.uid\n                }\n            );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        uid: state.firebase.auth.uid,\n        todos: state.firestore.ordered.todos ? state.firestore.ordered.todos : [],\n        selectedTodo: state.todos.selectedTodo,\n        completedTodo :state.todos.completedTodo\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectTodo: todo => dispatch({ type: 'selectTodo', todo }),\n        completTodo: todo => dispatch ({ type: 'completTodo', todo})\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    firestoreConnect((props) => {\n            if (!props.uid) return []\n            return [\n                {\n                    collection: 'todos',\n                    where: [\n                        ['uid', '==', props.uid]\n                    ]\n                }\n            ]\n        }\n    )\n)(TodoList)","import React, { Component } from 'react'\nimport { Provider } from \"react-redux\"\n\nimport store from \"./redux/store/store\"\nimport AuthButton from \"./components/AuthButton\"\nimport TodoList from \"./components/TodoList\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <div>\n                <AuthButton />\n                <TodoList />\n                </div>\n            </Provider>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}